{"version":3,"sources":["components/Header.js","components/WeatherCard.js","components/Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderComponent","className","WeatherCard","temprature","city","sunrise","sunset","humidity","icon","weatherIcons","faSmog","size","color","faBolt","faCloudRain","faSnowman","faSun","faCloud","Card","Content","Feed","Event","moment","format","Math","floor","Date","toLocaleTimeString","Forecast","forcast","style","marginTop","Group","stackable","itemsPerRow","map","data","Header","unix","dt","round","temp","max","min","Meta","Description","weather","description","App","useState","latitude","setLatitude","longitude","setLongitude","setCity","setTemprature","setHumidity","setSunrise","setSunset","setIcon","setForecast","loading","setloading","useEffect","navigator","geolocation","getCurrentPosition","position","coords","axios","get","then","weatherData","current","timezone","main","daily","Loader","active","inline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca7d0c54.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function HeaderComponent() {\r\n    return (\r\n        <div className=\"app-header-container\">\r\n             <h2 className=\"app-header\">React Weather</h2>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Card, Feed } from 'semantic-ui-react'\r\nimport moment from 'moment';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBolt, faCloud, faCloudRain, faSmog, faSnowman, faSun } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function WeatherCard(\r\n  { temprature, city, sunrise, sunset, humidity, icon }) {\r\n  let weatherIcons = null;\r\n\r\n  if (icon === 'Haze') {\r\n    weatherIcons = <FontAwesomeIcon icon={faSmog} size=\"3x\" color=\"#2196f3\" />\r\n  }\r\n  else if (icon === 'Thunderstorm') {\r\n    weatherIcons = <FontAwesomeIcon icon={faBolt} size=\"3x\" color=\"#9c27b0\" />\r\n  }\r\n  else if (icon === 'Drizzle') {\r\n    weatherIcons = <FontAwesomeIcon icon={faCloudRain} size=\"3x\" color=\"#03a9f4\" />\r\n  }\r\n  else if (icon === 'Rain') {\r\n    weatherIcons = <FontAwesomeIcon icon={faCloudRain} size=\"3x\" color=\"#2196f3\" />\r\n  }\r\n  else if (icon === 'Snow') {\r\n    weatherIcons = <FontAwesomeIcon icon={faSnowman} size=\"3x\" color=\"#757575\" />\r\n  }\r\n  else if (icon === 'Mist') {\r\n    weatherIcons = <FontAwesomeIcon icon={faSmog} size=\"3x\" color=\"#9e9e9e\" />\r\n  }\r\n  else if (icon === 'Clear') {\r\n    weatherIcons = <FontAwesomeIcon icon={faSun} size=\"3x\" color=\"#ffc107\" />\r\n  }\r\n  else if (icon === 'Clouds') {\r\n    weatherIcons = <FontAwesomeIcon icon={faCloud} size=\"3x\" color=\"#424242\" />\r\n  }\r\n  return (\r\n    <Card className=\"weather-card-main\">\r\n      <div className=\"weather-card\">\r\n        <h2 className=\"weather-card-child\">{city}</h2>\r\n        <div className=\"icon-container\">\r\n          {weatherIcons}\r\n        </div>\r\n      </div>\r\n      <Card.Content>\r\n        <Feed>\r\n          <Feed.Event>\r\n            <Feed.Content>\r\n              <h5 className=\"weather-card-child\">\r\n                {moment().format('MMMM Do, h:mm a')}\r\n              </h5>\r\n              <div className=\"weather-card\">\r\n                <div className=\"weather-card-child\">\r\n                  <b>Temprature</b>: {Math.floor(temprature)} ℃\r\n                </div>\r\n                <div className=\"weather-card-child\">\r\n                  <b>Humidity</b>: {humidity} %\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"weather-card\">\r\n                <div className=\"weather-card-child\">\r\n                  <b>Sunrise</b>: {new Date(sunrise * 1000).toLocaleTimeString('en-IN')}\r\n                </div>\r\n                <div className=\"weather-card-child\">\r\n                  <b>Sunset</b>: {new Date(sunset * 1000).toLocaleTimeString('en-IN')}\r\n                </div>\r\n              </div>\r\n\r\n            </Feed.Content>\r\n          </Feed.Event>\r\n        </Feed>\r\n      </Card.Content>\r\n    </Card>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Card } from 'semantic-ui-react';\r\nimport moment from 'moment';\r\n\r\nexport default function Forecast({ forcast }) {\r\n    return (\r\n        <div style={{ marginTop: 20 }}>\r\n            <div className=\"forecast-main-header\">\r\n                8 Day Forecast\r\n            </div>\r\n            <Card.Group stackable itemsPerRow={4}>\r\n                {forcast.map((data) => {\r\n                    return (\r\n                        <Card className=\"forecast-card\">\r\n                            <Card.Content>\r\n                                <Card.Header className=\"forecast-date\">\r\n                                    Date: {moment.unix(data.dt).format('LL')}\r\n                                </Card.Header>\r\n                                <Card.Header className=\"forecast-header\">\r\n                                    Temprature: {Math.round((data.temp.max + data.temp.min) / 2)} ℃\r\n                                </Card.Header>\r\n                                <Card.Meta className=\"forecast-header\">\r\n                                    Humidity: {data.humidity} %\r\n                                </Card.Meta>\r\n                                <Card.Description className=\"temp-desc\">\r\n                                    Description: {data.weather[0].description}\r\n                                </Card.Description>\r\n                            </Card.Content>\r\n                        </Card>\r\n                    )\r\n                })}\r\n            </Card.Group>\r\n        </div>\r\n    )\r\n}\r\n","import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport WeatherCard from './components/WeatherCard';\nimport Forecast from './components/Forecast';\nimport { Loader } from 'semantic-ui-react';\n\nconst URL = `https://api.openweathermap.org/data/2.5/onecall`\nconst API_KEY = `c5a48b3e59d242aedae7b2fb0b9ad0e4`\n\nfunction App() {\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [city, setCity] = useState('');\n  const [temprature, setTemprature] = useState(null);\n  const [humidity, setHumidity] = useState(null);\n  const [sunrise, setSunrise] = useState(null);\n  const [sunset, setSunset] = useState(null);\n  const [icon, setIcon] = useState('');\n  const [forcast, setForecast] = useState([]);\n  const [loading, setloading] = useState(true);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n    });\n\n    axios.get(`${URL}?lat=${latitude}&lon=${longitude}&exclude=hourly,minutely&appid=${API_KEY}&units=metric`)\n      .then((weatherData) => {\n        setloading(false)\n        setTemprature(weatherData.data.current.temp);\n        setSunset(weatherData.data.current.sunset)\n        setSunrise(weatherData.data.current.sunrise)\n        setHumidity(weatherData.data.current.humidity)\n        setCity(weatherData.data.timezone)\n        setIcon(weatherData.data.current.weather[0].main)\n        setForecast(weatherData.data.daily)\n      })\n\n  }, [latitude, longitude])\n\n  return (\n    <div className=\"main\">\n      <Header />\n      {loading ? (\n        <div>\n          <p>Loading..Please Wait</p>\n          <Loader active inline='centered' />\n        </div>\n      ) : (\n        <WeatherCard\n          temprature={temprature}\n          humidity={humidity}\n          sunrise={sunrise}\n          sunset={sunset}\n          city={city}\n          icon={icon}\n        />\n      )}\n      <Forecast forcast={forcast} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}